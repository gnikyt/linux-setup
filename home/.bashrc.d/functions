# Get current status of git repo
function parse_git_dirty() {
	status=$(git status 2>&1 | tee)
	dirty=$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
	untracked=$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
	ahead=$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
	newfile=$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
	renamed=$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
	deleted=$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}

# Get current branch in git repo
function parse_git_branch() {
	BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=$(parse_git_dirty)
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}

# Pomodo timer
# Example: `promo 5 Take a Break`
# Result: Plays sound and shows notification.
function pomo() {
    arg1=$1
    shift
    args="$*"

    min=${arg1:?Example: pomo 15 Take a break}
    sec=$((min * 60))
    msg="${args:?Example: pomo 15 Take a break}"

    while true; do
        sleep "${sec:?}" && for _ in {1..2}; do ogg123 /usr/share/sounds/gnome/default/alerts/sonar.ogg &> /dev/null; done && notify-send -u critical -t 0 "${msg:?}"
    done
}

# History backup
# Example: `histbkup`
# Result: will create a `.bash_history.[YYYY]_[MM]`
function histbkup() {
	KEEP=200
	BASH_HIST=~/.bash_history
	BACKUP="$BASH_HIST".$(date +%Y_%m)

	# History file is newer then backup
	if [ -f "$BACKUP" ]; then
		# There is already a backup
		cp -f "$BASH_HIST" "$BACKUP"
	else
		# Create new backup, leave last few commands and reinitialize
		mv -f "$BASH_HIST" "$BACKUP"
		tail -n "$KEEP" "$BACKUP" > "$BASH_HIST"
		history -r
	fi
}

# CD to show a list when switching
# Example: `cd ..`
# Result: Directory changed, directory listed
function cd() {
    builtin cd "$@" && ls -lA --color
}

# Move 'up' so many directories instead of using several cd ../../, etc.
# Example: `up 3`
# Result: Moves up 3 directories
function up() {
	cd $(eval printf '../'%.0s {1..$1}) && pwd;
}

# Show the paths
# Example: `showpath`
# Result: Shows path listing, one per line
function showpath() {
    echo "${PATH//:/ }" | tr " " "\n"
}

# Convert AMR file to MP3 with automatic call checks for output naming.
# Example: `amr2mp3 phone_20211005-120300.amr`
# Result: Creates 2021_10_05_12_03_00.mp3
function amr2mp3() {
    if [[ "$1" =~ "phone_" ]]; then
        fixed=$(echo "$1" | cut -d'_' -f2)
        date=$(echo "$fixed" | cut -d'-' -f1)
        time=$(echo "$fixed" | cut -d'-' -f2)
        year=${date:0:4}
        month=${date:4:2}
        day=${date:6:2}
        hour=${time:0:2}
        min=${time:2:2}
        sec=${time:4:2}

        filename=$(echo "${year}_${month}_${day}_${hour}_${min}_${sec}.mp3")
    else
        filename=${$1//amr/mp3}
    fi

    ffmpeg -i "$1" -ar 12000 "$filename"
}

# Convert Markdown to PDF
# Usage: `md2pdf file.md`
# Usage: `md2pdf file.md emoji`
function md2pdf() {
    if [[ "$3" == "emoji" ]]; then
	pandoc --pdf-engine=xelatex "$1" -V mainfont="DejaVu Sans" -o "$(dirname -- "$1")/$(basename -- "$1" .md).pdf"
    else
	pandoc --pdf-engine=xelatex "$1" -o "$(dirname -- "$1")/$(basename -- "$1" .md).pdf"
    fi
}
